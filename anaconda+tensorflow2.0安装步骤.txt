NVIDIA驱动安装
    准备工作
    - 禁用BIOS中的secure boot，因为此方法使用第三方源安装显卡驱动，不禁止secure boot会导致安装的驱动不
    能使用，禁用也不会有多大安全隐患。
    - 禁用nouveau，这是ubuntu默认使用的开源显卡驱动，和nvidia驱动一起使用可能导致黑屏，所以禁掉。
    禁用nouveau	
    创建blacklist-nouveau.conf
    $ sudo gedit /etc/modprobe.d/blacklist-nouveau.conf
    将下述内容插入该文件
    blacklist nouveau
    options nouveau modeset=0
    执行以下命令使禁用生效并且重启：
    $ sudo update-initramfs -u
    $ sudo reboot
    重启后，执行以下命令，若无输出则禁用成功。
    $ lsmod | grep nouveau
    安装显卡驱动
    删除旧的显卡驱动
    sudo apt-get purge nvidia-*
    查看合适的驱动版本
    ubuntu-drivers devices
    可通过sudo ubuntu-drivers autoinstall 或sudo apt-get install nvidia-driver-430安装，成功后需sudo     
    reboot重启。重启完毕后可运行nvidia-smi查看具体的显卡驱动信息。

下载cuda10
    cuda10.0地址：https://developer.nvidia.com/cuda-10.0-download-archive
    安装cuda
    $ sudo chmod 777 cuda_9.0.176_384.81_linux.run
    $ sudo ./cuda_9.0.176_384.81_linux.run
    选择是否创建/usr/local/cuda 的软连接时选no(n)，后面环境变量直接写具体的版本，可以避免多版本cuda混淆
    配置Cuda环境
    $ sudo gedit /etc/ld.so.conf.d/cuda.conf
    在打开的文件中添加如下语句：
    /usr/local/cuda-10.0/lib64
    执行
    sudo ldconfig
    配置到环境变量（不同环境下，配置不同环境变量，可以使用多个cuda版本）
    $ sudo gedit ~/.bashrc
    打开文件后在文件末尾添加路径，也就是安装目录，命令如下：

    export PATH=/usr/local/cuda-10.0/bin:$PATH

    export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64:$LD_LIBRARY_PATH
    运行
    source ~/.bashrc
    想配置为全局系统变量，请在/etc/profile中配置
    如果使用pycharm远程调用，程序不会导入.bashrc里面的环境变量，请在相应的运行python中配置如上的环境变 
    量。（不使用pycharm远程调用的忽略此条）

安装cuDNN7.5.1
    cudnn7.5.1（cuda10.0版）https://developer.nvidia.com/rdp/cudnn-download
    安装 cudnn：
    $ tar -zxvf cudnn-10.0-linux-x64-v7.5.1.10.tgz
    $ cd cuda
    $ sudo cp lib64/lib* /usr/local/cuda-10.0/lib64/
    $ sudo cp include/cudnn.h /usr/local/cuda-10.0/include/
    $ cd /usr/local/cuda-10.0/lib64/
    $ sudo chmod +r libcudnn.so.7.5.1 # 自己查看.so的版本
    $ sudo ln -sf libcudnn.so.7.5.1 libcudnn.so.7
    $ sudo ln -sf libcudnn.so.7 libcudnn.so
    终端输入nvcc -V，查看cuda版本

具体安装见博客 https://blog.csdn.net/qq_31456593/article/details/90170708


'''！！！！注意：ros先安装，再安装anaconda！！！！'''

Anaconda3安装
    下载合适的版本，清华镜像下载地址: 
    https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/
    安装:
    bash Anaconda3-5.2.0-Linux-x86_64.sh
    安装anaconda，但是不要选择将路径添加到环境变量,等下我们手动添加。
    安装完毕之后，暂时添加anaconda环境变量
    $ sudo gedit ~/.bashrc
    在文件末尾添加：
    export PATH=/home/maxingpei/anaconda3/bin:$PATH
    此时重新打开terminal，输入python，版本为：Python3.6.4,但是此时ROS中的一些包已经不能用了，因为python
    版本已经变了。
    
    先建一个虚拟环境:
    conda create -n TF_2G python=3.6
    而后:
    $ sudo gedit ~/.bashrc
    在文件中添加
    alias conda_tf2g='. /home/maxingpei/anaconda3/etc/profile.d/conda.sh && conda activate TF_2G'
    屏蔽掉
    #export PATH=/home/XXX/anaconda3/bin:$PATH
    新开一个terminal，conda_tf2g，此时进入并激活TF_2G的虚拟环境，再输入python，可以看到版本为
    3.6,再开一个terminal，输入python，版本还是之前ROS用到的Python2.7,实际环境和虚拟环境python版本进
    行了隔离。
    虚拟环境安装ROS需要的包:
    terminal输入conda_tf2g，进入TF_2G，然后
    (TF_2G)$ pip install --upgrade pip
    (TF_2G)$ pip install catkin-tools
    (TF_2G)$ pip install rospkg
    以后深度学习方面的开发在虚拟环境中做，通过虚拟环境中的ROS包和实际环境中的ROS包通信，达到python2.7和 
    python3.6的平衡。

配置tensorflow2.0.0虚拟环境
    进入虚拟环境
    $ conda activate TF2.0
    添加清华源为下载源
    (TF_2G)$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
    (TF_2G)$ conda config --set show_channel_urls yes
    安装Tensorflow2.0:
    (TF_2G)$ pip install tensorflow-gpu==2.0.0 -i https://pypi.tuna.tsinghua.edu.cn/simple
    由于目前anaconda不支持tensorflow2.0的安装，只能用pip安装。
    测试tensorflow：
    >> import tensorflow as tf
    >> version = tf.__version__
    >> gpu_ok = tf.test.is_gpu_available()
    >> print("tf version:",version,"\nuse GPU",gpu_ok)

    安装其他库:
    (TF_2G)$ conda install scipy scikit-learn matplotlib pandas
    安装opencv:
    (TF_2G)$ conda install opencv
    更新numpy:
    (TF_2G)$ conda install numpy=1.16.4
    安装Jupyter Notebook
    (TF_2G)$ conda install jupyter notebook 
    运行Jupyter Notebook
    (TF_2G)$ jupyter notebook (普通用户）
    (TF_2G)$ jupyter notebook --allow-root （root用户)
    Jupyter Notebook运行指定的conda虚拟环境

    (TF_2G)$ conda install nb_conda_kernels
    安装nb_conda_kernels，重启Jupyter Notebook即可。











